// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/ambu/app/ent/predicament"
	"github.com/ambu/app/ent/predicate"
	"github.com/ambu/app/ent/statuscar"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// StatuscarUpdate is the builder for updating Statuscar entities.
type StatuscarUpdate struct {
	config
	hooks      []Hook
	mutation   *StatuscarMutation
	predicates []predicate.Statuscar
}

// Where adds a new predicate for the builder.
func (su *StatuscarUpdate) Where(ps ...predicate.Statuscar) *StatuscarUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetStatusDetail sets the status_detail field.
func (su *StatuscarUpdate) SetStatusDetail(s string) *StatuscarUpdate {
	su.mutation.SetStatusDetail(s)
	return su
}

// AddPredicamentIDs adds the predicament edge to Predicament by ids.
func (su *StatuscarUpdate) AddPredicamentIDs(ids ...int) *StatuscarUpdate {
	su.mutation.AddPredicamentIDs(ids...)
	return su
}

// AddPredicament adds the predicament edges to Predicament.
func (su *StatuscarUpdate) AddPredicament(p ...*Predicament) *StatuscarUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPredicamentIDs(ids...)
}

// Mutation returns the StatuscarMutation object of the builder.
func (su *StatuscarUpdate) Mutation() *StatuscarMutation {
	return su.mutation
}

// RemovePredicamentIDs removes the predicament edge to Predicament by ids.
func (su *StatuscarUpdate) RemovePredicamentIDs(ids ...int) *StatuscarUpdate {
	su.mutation.RemovePredicamentIDs(ids...)
	return su
}

// RemovePredicament removes predicament edges to Predicament.
func (su *StatuscarUpdate) RemovePredicament(p ...*Predicament) *StatuscarUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePredicamentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *StatuscarUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := su.mutation.StatusDetail(); ok {
		if err := statuscar.StatusDetailValidator(v); err != nil {
			return 0, &ValidationError{Name: "status_detail", err: fmt.Errorf("ent: validator failed for field \"status_detail\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatuscarMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StatuscarUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StatuscarUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StatuscarUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StatuscarUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statuscar.Table,
			Columns: statuscar.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statuscar.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.StatusDetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statuscar.FieldStatusDetail,
		})
	}
	if nodes := su.mutation.RemovedPredicamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statuscar.PredicamentTable,
			Columns: []string{statuscar.PredicamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: predicament.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PredicamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statuscar.PredicamentTable,
			Columns: []string{statuscar.PredicamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: predicament.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statuscar.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StatuscarUpdateOne is the builder for updating a single Statuscar entity.
type StatuscarUpdateOne struct {
	config
	hooks    []Hook
	mutation *StatuscarMutation
}

// SetStatusDetail sets the status_detail field.
func (suo *StatuscarUpdateOne) SetStatusDetail(s string) *StatuscarUpdateOne {
	suo.mutation.SetStatusDetail(s)
	return suo
}

// AddPredicamentIDs adds the predicament edge to Predicament by ids.
func (suo *StatuscarUpdateOne) AddPredicamentIDs(ids ...int) *StatuscarUpdateOne {
	suo.mutation.AddPredicamentIDs(ids...)
	return suo
}

// AddPredicament adds the predicament edges to Predicament.
func (suo *StatuscarUpdateOne) AddPredicament(p ...*Predicament) *StatuscarUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPredicamentIDs(ids...)
}

// Mutation returns the StatuscarMutation object of the builder.
func (suo *StatuscarUpdateOne) Mutation() *StatuscarMutation {
	return suo.mutation
}

// RemovePredicamentIDs removes the predicament edge to Predicament by ids.
func (suo *StatuscarUpdateOne) RemovePredicamentIDs(ids ...int) *StatuscarUpdateOne {
	suo.mutation.RemovePredicamentIDs(ids...)
	return suo
}

// RemovePredicament removes predicament edges to Predicament.
func (suo *StatuscarUpdateOne) RemovePredicament(p ...*Predicament) *StatuscarUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePredicamentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *StatuscarUpdateOne) Save(ctx context.Context) (*Statuscar, error) {
	if v, ok := suo.mutation.StatusDetail(); ok {
		if err := statuscar.StatusDetailValidator(v); err != nil {
			return nil, &ValidationError{Name: "status_detail", err: fmt.Errorf("ent: validator failed for field \"status_detail\": %w", err)}
		}
	}

	var (
		err  error
		node *Statuscar
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatuscarMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StatuscarUpdateOne) SaveX(ctx context.Context) *Statuscar {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *StatuscarUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StatuscarUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StatuscarUpdateOne) sqlSave(ctx context.Context) (s *Statuscar, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statuscar.Table,
			Columns: statuscar.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statuscar.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Statuscar.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.StatusDetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statuscar.FieldStatusDetail,
		})
	}
	if nodes := suo.mutation.RemovedPredicamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statuscar.PredicamentTable,
			Columns: []string{statuscar.PredicamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: predicament.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PredicamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statuscar.PredicamentTable,
			Columns: []string{statuscar.PredicamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: predicament.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Statuscar{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statuscar.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
